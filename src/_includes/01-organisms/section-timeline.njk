{# ===========================================================
   @ORGANISMS - SECTION-TIMELINE
   - Timeline section with title, content blocks and optional progress bar
=========================================================== #}

{% macro renderSectionTimeline(option) %}
  {# Import required molecules and atoms #}
  {% from "02-molecules/content-block.njk" import renderContentBlock %}
  {% from "02-molecules/progress-bar.njk" import renderProgressBar %}
  {% from "03-atoms/typography.njk" import renderTypography %}
  {% from "03-atoms/icon.njk" import renderIcon %}

  {# Check if datas is provided #}
  {% if not option.datas %}
    <span class="text-red-500">Error: No section-timeline configuration provided</span>
  {% else %}
    {# Retrieve section-timeline configuration #}
    {% set sectionsConfig = option.datas %}
    {% set sectionName = option.name %}
    
    {# Find the specific section by name #}
    {% set sectionData = null %}
    {% for section in sectionsConfig %}
      {% if section.name == sectionName %}
        {% set sectionData = section %}
      {% endif %}
    {% endfor %}

    {# Fallback if section not found #}
    {% if not sectionData %}
      <span class="text-red-500">Section-timeline not found: {{ sectionName }}</span>
    {% else %}
      {# Build CSS classes from section name #}
      {% set cssClasses = 'section-timeline' %}
      
      {# Add any additional classes #}
      {% if option.class %}
        {% set cssClasses = cssClasses ~ ' ' ~ option.class %}
      {% endif %}
      
      {# Generate aria-label from title for better accessibility #}
      {% set ariaLabel = option.typographyDatas[sectionData.header.title].content if option.typographyDatas[sectionData.header.title] else sectionData.header.title %}
      
      {# Section container with enhanced accessibility #}
      <section 
        class="{{ cssClasses }} w-full bg-white" 
        id="{{ sectionData.id | default('timeline') }}"
        aria-labelledby="{{ sectionData.id | default('timeline') }}-heading"
        role="region">
        
        {# Section content with responsive padding and max-width #}
        <div class="section-timeline-content px-6 py-12 lg:px-24 lg:py-16 max-w-prose mx-auto">
          
          {# Section header with system gaps and proper heading id #}
          <div class="section-timeline-header mb-2 lg:mb-6 pb-4 mb-2 text-center">
            <div id="{{ sectionData.id | default('timeline') }}-heading">
              {{ renderTypography({ 
                  name: sectionData.header.title,
                  datas: option.typographyDatas
              }) }}
            </div>
          </div>
          
          {# Section content container with system gaps #}
          <div class="section-timeline-body flex flex-col gap-2 lg:gap-6">
            
            {# Content blocks list with semantic structure #}
            <div class="section-timeline-blocks flex flex-col gap-4 lg:gap-8" role="list">
              {% for blockName in sectionData.content.blocks %}
                <div class="section-timeline-block" role="listitem">
                  {{ renderContentBlock({ 
                      name: blockName,
                      datas: option.contentBlockDatas,
                      typographyDatas: option.typographyDatas,
                      imageDatas: option.imageDatas,
                      buttonDatas: option.buttonDatas,
                      linkDatas: option.linkDatas
                  }) }}
                </div>
              {% endfor %}
            </div>
            
            {# Optional progress bar #}
            {% if sectionData.content.progress_bar %}
            {# Horizontal separator with gradient before progress bar #}
            <div class="section-timeline-separator flex justify-center mt-4 mb-4 lg:mt-2 lg:mb-2" role="separator" aria-hidden="true">
              <div class="section-timeline-separator-line"></div>
            </div>
            
            <div class="section-timeline-progress flex justify-center">
              {{ renderProgressBar({ 
                  name: sectionData.content.progress_bar,
                  datas: option.progressBarDatas,
                  typographyDatas: option.typographyDatas
              }) }}
            </div>
            {% endif %}

            {# Optional foundation icons - Only for profile section with strict validation #}
            {% if sectionData.content.foundation_icons and sectionData.id and sectionData.id == 'profile' and sectionData.name == 'charlotte_profile' %}
{# TEMPORAIRE - TESTE JUSTE LE S√âPARATEUR
<div class="section-timeline-separator flex justify-center mt-4 mb-4 lg:mt-2 lg:mb-2" role="separator" aria-hidden="true">
  <div class="section-timeline-separator-line"></div>
</div>
FIN TEMPORAIRE #}
            
            <div class="section-timeline-foundation-icons flex justify-center">
              <div class="foundation-icons-container flex flex-row gap-4 justify-center items-center">
                {% for iconName in sectionData.content.foundation_icons %}
                  <div class="foundation-icon-item">
                    {{ renderIcon({ 
                        name: iconName,
                        datas: option.iconDatas
                    }) }}
                  </div>
                {% endfor %}
              </div>
            </div>
            {% endif %}
            
          </div>
          
        </div>
        
      </section>
    {% endif %}
  {% endif %}
{% endmacro %}

{# ===========================================================
   Summon HAT Components Wisely
-----------------------------------------------------------
1. Import the macro at the top of your page
{% from "01-organisms/section-timeline.njk" import renderSectionTimeline %}

2. Call the section-timeline
{{ renderSectionTimeline({ 
    name: "charlotte_journey",
    datas: organisms["section-timeline"].sections,
    typographyDatas: atoms.typography.texts,
    contentBlockDatas: molecules["content-block"]["content-blocks"],
    progressBarDatas: molecules["progress-bar"]["progress-bars"],
    imageDatas: atoms.image.images,
    buttonDatas: atoms.button.buttons,
    linkDatas: atoms.link.links,
    iconDatas: atoms.icon.icons
}) }}

May your bugs be forever exiled to the shadow realm. üßô‚Äç‚ôÇÔ∏è‚ú®
=========================================================== #}