{#
=========================
       PAGINATION         
=========================
#}

{% macro renderPagination(options) %}
  {# Check if required data is provided, show error if not #}
  {% if not options or not options.datas or (not options.datas.pager and not options.datas.navigationPager) %}
    <span class="text-red-500">Error: No pagination data provided</span>
  {% else %}
    {# Initialize pagination data based on provided structure #}
    {% if options.datas.navigationPager %}
      {% set paginationData = options.datas.navigationPager %}
      {% set children = paginationData.children | default([]) %}
    {% else %}
      {% set paginationData = options.datas.pager %}
    {% endif %}

    {# Select specific paginator by name if provided #}
    {% if options.name %}
      {% if options.datas.pager.name == options.name %}
        {% set paginationData = options.datas.pager %}
      {% elif options.datas.navigationPager and options.datas.navigationPager.name == options.name %}
        {% set paginationData = options.datas.navigationPager %}
        {% set children = paginationData.children | default([]) %}
      {% endif %}
    {% endif %}

    {# Get global style from data or use default empty string #}
    {% set globalStyle = options.datas.globalStyle | default('') %}

    <div class="pagination-container flex items-center">
      {# Items per page selector - Only rendered if itemsPerPage and selectData are provided #}
      {% if options.itemsPerPage and options.selectData %}
        <div class="items-per-page mr-4 relative">
          {% set selectRef = "" %}
          {% set selectVariant = "default" %}
          
          {# Get select reference if available in paginationData #}
          {% if paginationData.select and paginationData.select.itemsPerPage and paginationData.select.itemsPerPage.ref %}
            {% set selectRef = paginationData.select.itemsPerPage.ref %}
            {% set refParts = selectRef.split('.') %}
            
            {% if refParts | length == 2 %}
              {% set selectName = refParts[1] %}
              {% set matchingSelect = null %}
              
              {# Find the matching select in selectData #}
              {% for select in options.selectData.selects %}
                {% if select.name == selectName and not matchingSelect %}
                  {% set matchingSelect = select %}
                {% endif %}
              {% endfor %}
              
              {# Get variant if matching select is found #}
              {% if matchingSelect and matchingSelect.variant %}
                {% set selectVariant = matchingSelect.variant %}
              {% endif %}
            {% endif %}
          {% endif %}
          
          {# Apply select styling based on found variant or default #}
          {% set selectGlobalStyle = options.selectData.globalStyle | default('') %}
          {% set selectVariantStyle = options.selectData.variants[selectVariant] | default('') %}
          
          <select 
            class="{{ selectGlobalStyle }} {{ selectVariantStyle }} appearance-none pr-10"
            aria-label="{{ options.label | default('Items per page') }}"
            onchange="window.location.href=this.options[this.selectedIndex].getAttribute('data-url')"
          >
            {% set optionValues = [10, 20, 50, 100] %}
            {% if matchingSelect and matchingSelect.options %}
              {% set optionValues = [] %}
              {% for option in matchingSelect.options %}
                {% set optionValues = (optionValues.push(option.value | int), optionValues) %}
              {% endfor %}
            {% endif %}
            
            {% for count in optionValues %}
              {% set optionLabel = count %}
              {% if matchingSelect and matchingSelect.options %}
                {% for option in matchingSelect.options %}
                  {% if option.value | int == count %}
                    {% set optionLabel = option.label %}
                  {% endif %}
                {% endfor %}
              {% else %}
                {% set optionLabel = count ~ ' ' ~ (options.labelSuffix | default('per page')) %}
              {% endif %}
              
              <option 
                value="{{ count }}" 
                {% if count == options.itemsPerPage %} selected{% endif %} 
                data-url="?items={{ count }}"
              >
                {{ optionLabel }}
              </option>
            {% endfor %}
          </select>
          
          {# Add dropdown arrow indicator #}
          <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
            <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
              <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
            </svg>
          </div>
        </div>
      {% endif %}

      {# Pagination navigation - Only rendered if children array exists and has items #}
      {% if children and children | length > 0 %}
        <nav class="pagination {{ globalStyle }}" role="navigation" aria-label="Pagination">
          <ul class="flex flex-row items-center space-x-1">
            {% for page in children %}
              {% set buttonStyle = "" %}
              {% set buttonSize = "" %}
              {% set buttonClasses = "page-link" %}
              {% set buttonStateClasses = {} %}
              
              {# Resolve button reference if it exists and buttonData is provided #}
              {% if page.ref and options.buttonData %}
                {% set buttonParts = page.ref.split('.') %}
                {% if buttonParts | length == 2 %}
                  {% set buttonName = buttonParts[1] %}
                  {% set matchingButton = null %}
                  
                  {# Find the matching button - we'll use a variable instead of break #}
                  {% for button in options.buttonData.buttons %}
                    {% if button.name == buttonName and not matchingButton %}
                      {% set matchingButton = button %}
                    {% endif %}
                  {% endfor %}
                  
                  {# Apply styles if we found a matching button #}
                  {% if matchingButton %}
                    {# Get button variant style #}
                    {% set buttonVariant = matchingButton.style | default('default') %}
                    {% set variantConfig = options.buttonData.variants[buttonVariant] %}
                    
                    {# Get button size style #}
                    {% set buttonSizeKey = matchingButton.size | default('button') %}
                    {% set buttonSize = options.buttonData.sizes[buttonSizeKey] | default('') %}
                    
                    {# Combine all styles #}
                    {% set baseClasses = options.buttonData.globalStyle ~ " " ~ buttonSize %}
                    
                    {# Set button state classes #}
                    {% set buttonStateClasses = {
                      'default': variantConfig.default,
                      'hover': variantConfig.hover,
                      'focus': variantConfig.focus,
                      'active': variantConfig.active,
                      'disabled': variantConfig.disabled
                    } %}
                    
                    {# Default initial class #}
                    {% set buttonClasses = baseClasses ~ " " ~ buttonStateClasses.default ~ " page-link" %}
                    
                    {# Add current state style if page is current #}
                    {% if page.current and options.buttonData.states and options.buttonData.states.current %}
                      {% set buttonClasses = buttonClasses ~ " " ~ options.buttonData.states.current %}
                    {% endif %}
                  {% endif %}
                {% endif %}
              {% endif %}
              
              <li>
                <a href="{{ page.url }}" 
                  class="{{ buttonClasses }} flex items-center justify-center" 
                  rel="nofollow" 
                  {% if page.current %} aria-current="page" {% endif %}
                  {% if page.icon %} aria-label="{{ page.ariaLabel | default('Navigate') }}"{% endif %}
                  
                  {% if buttonStateClasses | length > 0 %}
                    onfocus="this.className='{{ baseClasses }} {{ buttonStateClasses.focus }} flex items-center justify-center page-link {% if page.current %}active{% endif %}'; this.setAttribute('data-focused', 'true');" 
                    onblur="this.className='{{ baseClasses }} {{ buttonStateClasses.default }} flex items-center justify-center page-link {% if page.current %}active{% endif %}'; this.removeAttribute('data-focused');"
                    onmouseover="this.className=this.hasAttribute('data-focused') ? '{{ baseClasses }} {{ buttonStateClasses.focus }} flex items-center justify-center page-link {% if page.current %}active{% endif %}' : '{{ baseClasses }} {{ buttonStateClasses.hover }} flex items-center justify-center page-link {% if page.current %}active{% endif %}';" 
                    onmouseout="this.className=this.hasAttribute('data-focused') ? '{{ baseClasses }} {{ buttonStateClasses.focus }} flex items-center justify-center page-link {% if page.current %}active{% endif %}' : '{{ baseClasses }} {{ buttonStateClasses.default }} flex items-center justify-center page-link {% if page.current %}active{% endif %}';" 
                    onmousedown="this.className='{{ baseClasses }} {{ buttonStateClasses.active }} flex items-center justify-center page-link {% if page.current %}active{% endif %}';" 
                    onmouseup="this.className=this.hasAttribute('data-focused') ? '{{ baseClasses }} {{ buttonStateClasses.focus }} flex items-center justify-center page-link {% if page.current %}active{% endif %}' : '{{ baseClasses }} {{ buttonStateClasses.hover }} flex items-center justify-center page-link {% if page.current %}active{% endif %}';"
                  {% endif %}
                >
                  
                  {% if page.icon %}
                    {# Find the corresponding icon in icons.json #}
                    {% set iconData = null %}
                    {% if options.icons %}
                      {% for icon in options.icons.icons %}
                        {% if icon.name == page.icon %}
                          {% set iconData = icon %}
                        {% endif %}
                      {% endfor %}
                    {% endif %}
                    
                    {% if iconData %}
                      {# Use data-svg-src for SVG loader, similar to button.njk #}
                      <span data-svg-src="{{ iconData.path }}" class="inline-flex items-center justify-center w-5 h-5">
                        <!-- SVG will be loaded here -->
                      </span>
                    {% else %}
                      {# Fallback - Use predefined SVG icon with currentColor to inherit styles #}
                      <span class="inline-flex items-center justify-center w-5 h-5">
                        {% if page.icon == 'first' %}
                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m11 17-5-5 5-5"/><path d="m18 17-5-5 5-5"/></svg>
                        {% elif page.icon == 'last' %}
                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m13 17 5-5-5-5"/><path d="m6 17 5-5-5-5"/></svg>
                        {% elif page.icon == 'next' %}
                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m9 18 6-6-6-6"/></svg>
                        {% elif page.icon == 'prev' %}
                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m15 18-6-6 6-6"/></svg>
                        {% else %}
                          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/></svg>
                        {% endif %}
                      </span>
                    {% endif %}
                  {% else %}
                    {{ page.label }}
                  {% endif %}
                </a>
              </li>
            {% endfor %}
          </ul>
        </nav>
      {% else %}
        <span class="text-gray-500">No pages available</span>
      {% endif %}

      {# Items counter - Shows range of items being displayed (e.g., "1-10 of 98") #}
      {% if options.totalItems and options.currentPage and options.itemsPerPage and paginationData.showTotalCount %}
        {# Calculate first item number on current page #}
        {% set firstItem = (options.currentPage - 1) * options.itemsPerPage + 1 %}
        {# Calculate last item number (might exceed total) #}
        {% set lastItemTemp = options.currentPage * options.itemsPerPage %}
        {% set lastItem = lastItemTemp %}
        {# Adjust last item if it exceeds total #}
        {% if lastItemTemp > options.totalItems %}
          {% set lastItem = options.totalItems %}
        {% endif %}

        <div class="items-count ml-4">
          <span class="text-gray-600 text-sm">
            {{ firstItem }} - {{ lastItem }} of {{ options.totalItems }}
          </span>
        </div>
      {% endif %}
    </div>
  {% endif %}
{% endmacro %}


{#
============================
Summon HAT Components Wisely
============================

1. Import the macro at the top of your page
{% from "02-molecules/pagination.njk" import renderPagination %}

2. Full pagination component with select, navigation and count
{{ renderPagination({ 
    name: "pager", 
    currentPage: 1,
    totalPages: 10,
    itemsPerPage: 10,
    totalItems: 98,
    label: "Show",
    labelSuffix: "items",
    buttonData: atoms.buttons,
    selectData: atoms.selects,
    icons: atoms.icons,
    datas: molecules.paginations 
}) }}

3. Navigation pager only (just the page numbers and navigation buttons)
{{ renderPagination({ 
    name: "navigation-pager", 
    currentPage: 1,
    totalPages: 10,
    buttonData: atoms.buttons,
    icons: atoms.icons, 
    datas: molecules.paginations 
}) }}

4. Custom configuration options
- currentPage: Current active page (number)
- totalPages: Total number of pages (number)
- itemsPerPage: Number of items displayed per page (number)
- totalItems: Total count of items (number)
- label: Label text for select (string)
- labelSuffix: Text to display after the number (default: "per page")
- buttonData: Button component data from atoms.buttons 
- selectData: Select component data from atoms.selects
- icons: Icon component data from atoms.icons

May the winds favor your sails and not your enemies'! ⛵🌬️
#}