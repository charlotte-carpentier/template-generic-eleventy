{# ┌─────────────────────────────────────────────────────────┐
   │ MOLECULE › Caption                                      │
   │ Icon with text content and tooltip behavior             │
   └─────────────────────────────────────────────────────────┘ #}

{#
  Usage — Summon HAT Components Wisely:
    {% from "02-molecules/caption.njk" import renderCaption %}
    
    {{ renderCaption({ 
        name: "languages_symfony",
        datas: molecules.caption.captions,
        iconDatas: atoms.icon.icons,
        tooltipDatas: atoms.tooltip.tooltips,
        typographyDatas: atoms.typography.texts
    }) }}
  
  Props:
    - option.name (string): Caption identifier
    - option.datas (array): Caption configuration
    - option.iconDatas (array): Icons atom data
    - option.tooltipDatas (array): Tooltips atom data
    - option.typographyDatas (array): Typography atom data
  
  Features:
    - Desktop: Icon + Title (hides on hover) + Tooltip (appears below)
    - Mobile: Icon + Content side-by-side (label + description stacked)
    - Gradient color support on icons
    - Unique tooltip IDs for accessibility
  
  Accessibility:
    - Keyboard accessible (tabindex="0")
    - aria-describedby links to tooltip
    - Tooltip has role="tooltip" and aria-hidden states
  
  @created 2025-01-15
#}

{# Import atoms #}
{% from "01-atoms/icon.njk" import renderIcon %}
{% from "01-atoms/tooltip.njk" import renderTooltip %}
{% from "01-atoms/heading.njk" import renderHeading %}

{% macro renderCaption(option) %}
  {# Check if datas is provided #}
  {% if not option.datas %}
    <span>Error: No caption configuration provided</span>
  {% else %}
    {# Retrieve caption configuration #}
    {% set captionsConfig = option.datas %}
    {% set captionName = option.name %}
    
    {# Find the specific caption by name #}
    {% set captionData = null %}
    {% for caption in captionsConfig %}
      {% if caption.name == captionName %}
        {% set captionData = caption %}
      {% endif %}
    {% endfor %}

    {# Fallback if caption not found #}
    {% if not captionData %}
      <span>Caption not found: {{ captionName }}</span>
    {% else %}
      {# Get tooltip data for label and description #}
      {% set tooltipData = null %}
      {% for tooltip in option.tooltipDatas %}
        {% if tooltip.name == captionData.tooltipName %}
          {% set tooltipData = tooltip %}
        {% endif %}
      {% endfor %}
      
      {# Get typography data for labels #}
      {% set typographyData = null %}
      {% for typography in option.typographyDatas %}
        {% if typography.name == captionData.name %}
          {% set typographyData = typography %}
        {% endif %}
      {% endfor %}
      
      {# Generate unique tooltip ID #}
      {% set tooltipId = "tooltip-" ~ captionData.name ~ "-" ~ loop.index0 if loop.index0 is defined else "tooltip-" ~ captionData.name %}
      
      {# Caption container with tooltip logic and ARIA attributes #}
      <div class="" 
           data-tooltip="{{ captionData.name }}" 
           tabindex="0"
           aria-describedby="{{ tooltipId }}">
        
        {# Desktop version: Icon + Title + Tooltip (tooltip appears below, title hides) #}
        <div class="">
          {# Icon (64x64 desktop) with gradient class #}
          {{ renderIcon({ 
            name: captionData.iconName,
            datas: option.iconDatas,
            class: "" ~ captionData.gradientColor
          }) }}
          
          {# Title - Typography classes with proper text #}
          <div class="">{{ typographyData.text if typographyData else captionData.name }}</div>
          
          {# Tooltip (hidden by default, shown below icon on hover/focus) #}
          <div class="" 
               id="{{ tooltipId }}" 
               role="tooltip" 
               aria-hidden="true">
            {{ renderTooltip({ 
              name: captionData.tooltipName,
              datas: option.tooltipDatas
            }) }}
          </div>
        </div>

        {# Mobile version: Icon + Content (side by side) #}
        <div class="">
          {# Icon (50x50 mobile) with gradient class #}
          {{ renderIcon({ 
            name: captionData.iconName,
            datas: option.iconDatas,
            class: "" ~ captionData.gradientColor
          }) }}
          
          {# Content container (label + description stacked) #}
          <div class="">
            {# Label - Typography classes #}
            <div class="">{{ typographyData.text if typographyData else captionData.name }}</div>
            
            {# Description - Typography classes #}
            <div class="">{{ tooltipData.description if tooltipData else "Description manquante" }}</div>
          </div>
        </div>
      </div>
    {% endif %}
  {% endif %}
{% endmacro %}


{#
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
May your bugs be forever exiled to the shadow realm ✦
Charlotte Carpentier · 2025
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#}