{# ┌─────────────────────────────────────────────────────────┐
   │ ATOM › Checkbox                                         │
   │ Accessible checkbox inputs with labels                  │
   └─────────────────────────────────────────────────────────┘ #}

{#
  Props:
    - options.id (string): Checkbox identifier for single rendering
    - options.group (boolean): Render as group if true
    - options.groupName (string): Specific group name to render
    - options.groupSrOnly (boolean): Hide group label visually
    - options.datas (array): Checkbox configuration data

  Usage — Summon HAT Components Wisely:
    {% from "01-atoms/checkbox.njk" import renderCheckbox %}

    Single checkbox:
    {{ renderCheckbox({
       id: "demoCheck1",
       datas: atoms.checkbox.checkboxes
    }) }}

    Specific group:
    {{ renderCheckbox({
       group: true,
       groupName: "rpgStyles",
       datas: atoms.checkbox.checkboxes
    }) }}

    All groups:
    {{ renderCheckbox({
       group: true,
       datas: atoms.checkbox.checkboxes
    }) }}

  @created 2025-01-15
#}

{% macro renderCheckbox(options) %}
  {# Validate required props #}
  {% if not options.datas %}
    <span class="error" role="alert">Error: Missing required prop (datas)</span>
  {% else %}
    {# Group rendering #}
    {% if options.group %}
      {% if options.groupName and options.datas[options.groupName] %}
        {# Render specific group #}
        {{ renderCheckboxGroup(
          options.datas[options.groupName],
          options.datas[options.groupName].groupLabel | default(options.groupName)
        ) }}
      {% else %}
        {# Render all groups #}
        {% for groupName, groupConfig in options.datas %}
          {% if groupConfig.checkboxes %}
            {{ renderCheckboxGroup(
              groupConfig,
              groupConfig.groupLabel | default(groupName)
            ) }}
          {% endif %}
        {% endfor %}
      {% endif %}

    {# Single checkbox rendering #}
    {% else %}
      {% if not options.id %}
        <span class="error" role="alert">Error: Missing required prop (id) for single checkbox</span>
      {% else %}
        {# Find checkbox using universal filter #}
        {% set targetCheckbox = options.datas | findByName(options.id) %}

        {# Render or show error #}
        {% if targetCheckbox %}
          {{ renderSingleCheckbox(targetCheckbox) }}
        {% else %}
          <span class="error" role="alert">Checkbox not found: {{ options.id }}</span>
        {% endif %}
      {% endif %}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro renderCheckboxGroup(groupConfig, groupLabel) %}
  <fieldset
    data-checkbox-group
    {% if groupConfig.ariaGroupLabel %}aria-label="{{ groupConfig.ariaGroupLabel }}"{% endif %}
  >
    {% if groupLabel %}
      <legend {% if groupConfig.groupSrOnly %}class="sr-only"{% endif %}>
        {{ groupLabel }}
      </legend>
    {% endif %}

    {% if groupConfig.groupDescription %}
      <p>{{ groupConfig.groupDescription }}</p>
    {% endif %}

    <div>
      {% for checkbox in groupConfig.checkboxes %}
        {{ renderSingleCheckbox(checkbox) }}
      {% endfor %}
    </div>
  </fieldset>
{% endmacro %}

{% macro renderSingleCheckbox(checkbox) %}
  {# Compute final values from nested box structure #}
  {% set boxData = checkbox.box | default({}) %}
  {% set isChecked = boxData.checked | default(false) %}
  {% set isDisabled = boxData.disabled | default(false) %}
  {% set isRequired = boxData.required | default(false) %}
  {% set checkboxValue = boxData.value | default(checkbox.id) %}
  {% set finalAriaLabel = checkbox.ariaLabel | default(checkbox.label) %}
  {% set hasDescription = checkbox.description %}

  <label
    for="{{ checkbox.id }}"
    data-checkbox-label
  >
    <div>
      <input
        type="checkbox"
        id="{{ checkbox.id }}"
        name="{{ checkbox.id }}"
        value="{{ checkboxValue }}"
        data-checkbox-id="{{ checkbox.id }}"
        data-checkbox-type="checkbox"
        {% if isChecked %}checked{% endif %}
        {% if isDisabled %}disabled{% endif %}
        {% if isRequired %}required{% endif %}
        {% if finalAriaLabel %}aria-label="{{ finalAriaLabel }}"{% endif %}
        {% if hasDescription %}aria-describedby="{{ checkbox.id }}-description"{% endif %}
      />
    </div>

    <div>
      <span>
        {{ checkbox.label }}
        {% if isRequired %}
          <span aria-hidden="true">*</span>
          <span class="sr-only">(required)</span>
        {% endif %}
      </span>

      {% if hasDescription %}
        <p id="{{ checkbox.id }}-description">
          {{ checkbox.description }}
        </p>
      {% endif %}
    </div>
  </label>
{% endmacro %}

{#
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
May your bugs be forever exiled to the shadow realm ✦
Charlotte Carpentier · 2025
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#}
