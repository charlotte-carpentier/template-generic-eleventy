{# ┌─────────────────────────────────────────────────────────┐
   │ ATOM › Checkbox                                         │
   │ Accessible checkbox inputs with labels                  │
   └─────────────────────────────────────────────────────────┘ #}

{#
  Props:
    - options.id (string): Checkbox identifier for single rendering
    - options.group (boolean): Render as group if true
    - options.groupName (string): Specific group name to render
    - options.groupSrOnly (boolean): Hide group label visually
    - options.datas (array): Checkbox configuration data

  Usage — Summon HAT Components Wisely:
    {% from "01-atoms/checkbox.njk" import renderCheckbox %}

    Single checkbox:
    {{ renderCheckbox({
       id: "demoCheck1",
       datas: atoms.checkbox.checkboxes
    }) }}

    Specific group:
    {{ renderCheckbox({
       group: true,
       groupName: "rpgStyles",
       datas: atoms.checkbox.checkboxes
    }) }}

    All groups:
    {{ renderCheckbox({
       group: true,
       datas: atoms.checkbox.checkboxes
    }) }}

  @created 2025-01-15
#}

{% macro renderCheckbox(options) %}
  {# Validate required props #}
  {% if not options.datas %}
    <span class="error" role="alert">Error: Missing required prop (datas)</span>
  {% else %}
    {# Group rendering #}
    {% if options.group %}
      {% if options.groupName and options.datas[options.groupName] %}
        {# Render specific group #}
        {{ renderCheckboxGroup(
          options.datas[options.groupName],
          options.datas[options.groupName].groupLabel | default(options.groupName)
        ) }}
      {% else %}
        {# Render all groups #}
        {% for groupName, groupConfig in options.datas %}
          {% if groupConfig.checkboxes %}
            {{ renderCheckboxGroup(
              groupConfig,
              groupConfig.groupLabel | default(groupName)
            ) }}
          {% endif %}
        {% endfor %}
      {% endif %}

    {# Single checkbox rendering #}
    {% else %}
      {% if not options.id %}
        <span class="error" role="alert">Error: Missing required prop (id) for single checkbox</span>
      {% else %}
        {# Find checkbox using universal filter #}
        {% set targetCheckbox = options.datas | findByName(options.id) %}

        {# Render or show error #}
        {% if targetCheckbox %}
          {{ renderSingleCheckbox(targetCheckbox) }}
        {% else %}
          <span class="error" role="alert">Checkbox not found: {{ options.id }}</span>
        {% endif %}
      {% endif %}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro renderCheckboxGroup(groupConfig, groupLabel) %}
  {# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
     CSS Classes - Fieldset/Legend
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #}

  {# Fieldset classes - Semantic grouping with minimal styling #}
  {% set fieldsetClasses = "border-0 p-0 m-0" %}

  {# Legend classes - Group label typography #}
  {% set legendClasses = "mb-3 text-base font-semibold text-[var(--color-global-default)]" %}

  {# Description classes - Help text for group #}
  {% set descriptionClasses = "mt-1 mb-3 text-sm text-[var(--color-neutral-50)]" %}

  {# Checkbox container - Vertical stack with spacing #}
  {% set containerClasses = "flex flex-col gap-2" %}

  <fieldset
    class="{{ fieldsetClasses }}"
    data-checkbox-group
    {% if groupConfig.ariaGroupLabel %}aria-label="{{ groupConfig.ariaGroupLabel }}"{% endif %}
  >
    {% if groupLabel %}
      <legend class="{{ legendClasses }} {% if groupConfig.groupSrOnly %}sr-only{% endif %}">
        {{ groupLabel }}
      </legend>
    {% endif %}

    {% if groupConfig.groupDescription %}
      <p class="{{ descriptionClasses }}">{{ groupConfig.groupDescription }}</p>
    {% endif %}

    <div class="{{ containerClasses }}">
      {% for checkbox in groupConfig.checkboxes %}
        {{ renderSingleCheckbox(checkbox) }}
      {% endfor %}
    </div>
  </fieldset>
{% endmacro %}

{% macro renderSingleCheckbox(checkbox) %}
  {# Compute final values from nested box structure #}
  {% set boxData = checkbox.box | default({}) %}
  {% set isChecked = boxData.checked | default(false) %}
  {% set isDisabled = boxData.disabled | default(false) %}
  {% set isRequired = boxData.required | default(false) %}
  {% set checkboxValue = boxData.value | default(checkbox.id) %}
  {% set finalAriaLabel = checkbox.ariaLabel | default(checkbox.label) %}
  {% set hasDescription = checkbox.description %}

  {# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
     CSS Classes - Tailwind Utilities
  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ #}

  {# Label wrapper - Flex layout for checkbox + text #}
  {% set labelClasses = "inline-flex items-start gap-2 cursor-pointer group" %}

  {# Input wrapper - Position relative for absolute checkmark positioning #}
  {% set inputWrapperClasses = "relative flex items-center" %}

  {# Input base - Custom styled checkbox using appearance-none
     Peer class enables styling checkmark based on checked state #}
  {% set inputClasses = "peer h-5 w-5 cursor-pointer appearance-none rounded-[var(--radius-4)] border-2 transition-all border-[var(--color-form)] hover:border-[var(--color-form-hover)] checked:bg-[var(--color-form-control-checked)] checked:border-[var(--color-form-control-checked)] focus:outline-none focus:ring-2 focus:ring-[var(--color-semantic-information-focus)] disabled:opacity-50 disabled:cursor-not-allowed" %}

  {# Checkmark - Standard Material Tailwind approach
     Absolute positioned with transform translate for perfect centering #}
  {% set checkmarkClasses = "absolute text-white opacity-0 pointer-events-none top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 peer-checked:opacity-100 transition-opacity" %}

  {# Text container - Vertical stack for label + description #}
  {% set textContainerClasses = "flex flex-col" %}

  {# Label text - Primary text with required indicator #}
  {% set labelTextClasses = "text-base text-[var(--color-form)] group-hover:text-[var(--color-form-hover)] select-none transition-colors" %}

  {# Description text - Secondary help text #}
  {% set descriptionClasses = "mt-0.5 text-sm text-[var(--color-neutral-50)]" %}

  <label
    for="{{ checkbox.id }}"
    class="{{ labelClasses }}"
    data-checkbox-label
  >
    <div class="{{ inputWrapperClasses }}">
      <input
        type="checkbox"
        id="{{ checkbox.id }}"
        name="{{ checkbox.id }}"
        value="{{ checkboxValue }}"
        class="{{ inputClasses }}"
        data-checkbox-id="{{ checkbox.id }}"
        data-checkbox-type="checkbox"
        {% if isChecked %}checked{% endif %}
        {% if isDisabled %}disabled{% endif %}
        {% if isRequired %}required{% endif %}
        {% if finalAriaLabel %}aria-label="{{ finalAriaLabel }}"{% endif %}
        {% if hasDescription %}aria-describedby="{{ checkbox.id }}-description"{% endif %}
      />

      {# Checkmark SVG - Simple checkmark, centered in 16x16 viewBox #}
      <span class="{{ checkmarkClasses }}">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="none" class="w-3 h-3">
          <path d="M3 8L6 11L13 4" stroke="white" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </span>
    </div>

    <div class="{{ textContainerClasses }}">
      <span class="{{ labelTextClasses }}">
        {{ checkbox.label }}
        {% if isRequired %}
          <span aria-hidden="true">*</span>
          <span class="sr-only">(required)</span>
        {% endif %}
      </span>

      {% if hasDescription %}
        <p id="{{ checkbox.id }}-description" class="{{ descriptionClasses }}">
          {{ checkbox.description }}
        </p>
      {% endif %}
    </div>
  </label>
{% endmacro %}

{#
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
May your bugs be forever exiled to the shadow realm ✦
Charlotte Carpentier · 2025
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#}