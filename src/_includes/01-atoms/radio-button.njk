{# ┌─────────────────────────────────────────────────────────┐
   │ ATOM › Radio Button                                     │
   │ Radio inputs with label and description support         │
   └─────────────────────────────────────────────────────────┘ #}

{#
  Props:
    - options.id (string): Radio button identifier for single rendering
    - options.group (boolean): Render as group if true
    - options.groupLabel (string): Group label text for fieldset legend
    - options.groupSrOnly (boolean): Hide group label visually
    - options.datas (object): Radio button configuration data

  Usage — Summon HAT Components Wisely:
    {% from "01-atoms/radio-button.njk" import renderRadioButton %}

    Single radio button:
    {{ renderRadioButton({
        id: "demoRadio1",
        datas: atoms["radio-button"].radioButtons
    }) }}

    Group of radio buttons:
    {{ renderRadioButton({
        group: true,
        groupLabel: "Choose an option",
        datas: atoms["radio-button"].radioButtons
    }) }}

  @created 2025-01-15
#}

{% macro renderRadioButton(options) %}
  {# Validate required props #}
  {% if not options.datas %}
    <span class="error" role="alert">Error: Missing required prop (datas)</span>
  {% elif options.group %}
    {# Group mode validation #}
    {% if not options.groupLabel %}
      <span class="error" role="alert">Error: Missing required prop (groupLabel) for group mode</span>
    {% else %}
      {# Render fieldset group #}
      <fieldset data-radio-group-type="radio-button">
        <legend {% if options.groupSrOnly %}class="sr-only"{% endif %}>
          {{ options.groupLabel }}
        </legend>

        {% for radioButton in options.datas.radioButtons %}
          {{ renderSingleRadio(radioButton) }}
        {% endfor %}
      </fieldset>
    {% endif %}
  {% elif not options.id %}
    <span class="error" role="alert">Error: Missing required prop (id) for single mode</span>
  {% else %}
    {# Single mode - find radio button using universal filter #}
    {% set radioButtonData = options.datas | findByName(options.id) %}

    {% if not radioButtonData %}
      <span class="error" role="alert">Radio button not found: {{ options.id }}</span>
    {% else %}
      {{ renderSingleRadio(radioButtonData) }}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro renderSingleRadio(radioButton) %}
  {# Read nested structure with fallbacks #}
  {% set radioData = radioButton.radio | default({}) %}
  {% set radioValue = radioData.value | default(radioButton.id) %}
  {% set isChecked = radioData.checked | default(false) %}
  {% set isDisabled = radioData.disabled | default(false) %}

  {# Render radio button with label #}
  <label for="{{ radioButton.id }}">
    <input
      type="radio"
      id="{{ radioButton.id }}"
      name="{{ radioButton.name | default('radio-group') }}"
      value="{{ radioValue }}"
      data-radio-id="{{ radioButton.id }}"
      data-radio-type="radio-button"
      {% if isChecked %}checked{% endif %}
      {% if isDisabled %}disabled{% endif %}
      {% if radioButton.ariaLabel %}aria-label="{{ radioButton.ariaLabel }}"{% endif %}
    />

    {% if radioButton.label %}
      <span>{{ radioButton.label }}</span>
    {% endif %}
  </label>
{% endmacro %}

{#
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
May your bugs be forever exiled to the shadow realm ✦
Charlotte Carpentier · 2025
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#}
