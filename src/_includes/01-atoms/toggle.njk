{# ┌─────────────────────────────────────────────────────────┐
   │ ATOM › Toggle                                           │
   │ Toggle switches with label and description support      │
   └─────────────────────────────────────────────────────────┘ #}

{#
  Props:
    - options.id (string): Toggle identifier for single rendering
    - options.group (boolean): Render as group if true
    - options.groupLabel (string): Group label text for fieldset legend
    - options.groupSrOnly (boolean): Hide group label visually
    - options.datas (array): Toggle configuration data

  Usage — Summon HAT Components Wisely:
    {% from "01-atoms/toggle.njk" import renderToggle %}

    Single toggle:
    {{ renderToggle({
        id: "demoToggle1",
        datas: atoms.toggle.toggles
    }) }}

    Group of toggles:
    {{ renderToggle({
        group: true,
        groupLabel: "Options",
        datas: atoms.toggle.toggles
    }) }}

  @created 2025-01-15
#}

{% macro renderToggle(options) %}
  {# Validate required props #}
  {% if not options.datas %}
    <span class="error" role="alert">Error: Missing required prop (datas)</span>
  {% elif options.group %}
    {# Group mode validation #}
    {% if not options.groupLabel %}
      <span class="error" role="alert">Error: Missing required prop (groupLabel) for group mode</span>
    {% else %}
      {# Render fieldset group #}
      <fieldset data-toggle-group-type="toggle">
        <legend {% if options.groupSrOnly %}class="sr-only"{% endif %}>
          {{ options.groupLabel }}
        </legend>

        {% for toggle in options.datas %}
          {{ renderSingleToggle(toggle) }}
        {% endfor %}
      </fieldset>
    {% endif %}
  {% elif not options.id %}
    <span class="error" role="alert">Error: Missing required prop (id) for single mode</span>
  {% else %}
    {# Single mode - find toggle using universal filter #}
    {% set toggleData = options.datas | findByName(options.id) %}

    {% if not toggleData %}
      <span class="error" role="alert">Toggle not found: {{ options.id }}</span>
    {% else %}
      {{ renderSingleToggle(toggleData) }}
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro renderSingleToggle(toggle) %}
  {# Read nested structure with fallbacks #}
  {% set switchData = toggle.switch | default({}) %}
  {% set switchValue = switchData.value | default(toggle.id) %}
  {% set isChecked = switchData.checked | default(false) %}
  {% set isDisabled = switchData.disabled | default(false) %}
  {% set switchSize = switchData.size | default('medium') %}
  {% set switchVariant = switchData.variant | default('default') %}

  {# Render toggle with label #}
  <label for="{{ toggle.id }}">
    <input
      type="checkbox"
      id="{{ toggle.id }}"
      name="{{ toggle.id }}"
      value="{{ switchValue }}"
      class="sr-only peer"
      data-toggle-id="{{ toggle.id }}"
      data-toggle-type="toggle"
      data-toggle-size="{{ switchSize }}"
      data-toggle-variant="{{ switchVariant }}"
      {% if isChecked %}checked{% endif %}
      {% if isDisabled %}disabled{% endif %}
      {% if switchData.ariaLabel %}aria-label="{{ switchData.ariaLabel }}"{% endif %}
    />

    {# Toggle visual container #}
    <div data-toggle-container>
      <div data-toggle-thumb></div>
    </div>

    {# Label and description #}
    {% if toggle.label or toggle.description %}
      <div>
        {% if toggle.label %}
          <span>{{ toggle.label }}</span>
        {% endif %}

        {% if toggle.description %}
          <p>{{ toggle.description }}</p>
        {% endif %}
      </div>
    {% endif %}
  </label>
{% endmacro %}

{#
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
May your bugs be forever exiled to the shadow realm ✦
Charlotte Carpentier · 2025
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#}
