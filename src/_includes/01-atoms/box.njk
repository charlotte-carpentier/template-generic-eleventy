{# ┌─────────────────────────────────────────────────────────┐
   │ ATOM › Box                                              │
   │ Checkbox visual foundation component                    │
   └─────────────────────────────────────────────────────────┘ #}

{#
  Usage — Summon HAT Components Wisely:
    {% from "01-atoms/box.njk" import renderBox %}

    Single box:
    {{ renderBox({ id: "box1", datas: atoms.boxes }) }}

    Group of boxes:
    {{ renderBox({ group: true, datas: atoms.boxes }) }}

  Props:
    - options.id (string): Unique identifier for single box
    - options.group (boolean): Render as group if true
    - options.datas (object): Box configuration data

  Notes:
    - Foundation component for checkbox.njk
    - Handles states: default, hover, focus, checked, disabled
    - All styles defined in boxes.json
    - Shows pointer cursor on hover for better UX

  Accessibility:
    - Supports aria-label for screen readers
    - Maintains proper focus states with visual indicators
    - Includes proper disabled state handling

  @created 2025-01-15
#}

{% macro renderBox(options) %}
{# Initialize default values for styling classes #}
{% set globalStyle = options.datas.globalStyle | default('') %}
{% set fieldsetClasses = options.datas.fieldsetClasses | default('') %}
{% set groupContainerClasses = options.datas.groupContainerClasses | default('') %}

    {# Create JSON string of styles for JavaScript #}
{% set stylesJson = {
  "baseClasses": options.datas.baseClasses,
  "variants": options.datas.variants
} | dump | safe %}

  {# Check if rendering as a group or individual box #}
  {% if options.group %}
    <fieldset class="{{ fieldsetClasses }}" data-box-styles='{{ stylesJson }}'>
      <div class="{{ groupContainerClasses }}">
        {% for box in options.datas.boxes %}
          {{ renderSingleBox(box, options.datas) }}
        {% endfor %}
      </div>
    </fieldset>
  {% else %}
    {# Initialize boxData as null before searching #}
    {% set boxData = null %}

    {# Find the box matching the requested ID in the data collection #}
    {% for box in options.datas.boxes %}
      {% if box.id == options.id %}
        {% set boxData = box %}
      {% endif %}
    {% endfor %}

    {# Render box if data was found, otherwise show error #}
    {% if boxData %}
      <div data-box-styles='{{ stylesJson }}'>
        {{ renderSingleBox(boxData, options.datas) }}
      </div>
    {% else %}
      <span class="{{ options.datas.errorClasses | default('') }}">Box not found:
        {{ options.id }}</span>
    {% endif %}
  {% endif %}
{% endmacro %}

{% macro renderSingleBox(box, datas) %}
  {# Initialize style classes for the box and its components #}
  {% set boxContainerClasses = datas.boxContainerClasses | default('') %}
  {% set baseClasses = datas.baseClasses | default('') %}

  {# Define state classes for different visual states #}
  {% set stateClasses = {
    'default': datas.variants.default | default(''),
    'hover': datas.variants.hover | default(''),
    'checked': datas.variants.checked | default(''),
    'focus': datas.variants.focus | default(''),
    'disabled': datas.variants.disabled | default(''),
    'disabledChecked': datas.variants.disabledChecked | default('')
  } %}

  {# Combine base classes with default state #}
  {% set inputClasses = baseClasses ~ ' ' ~ stateClasses.default %}

  <div class="{{ boxContainerClasses }}">
    <input type="checkbox" id="{{ box.id }}" name="{{ box.id }}" value="{{ box.value }}" class="{{ baseClasses }} {% if box.checked %}{{ stateClasses.disabledChecked }}{% else %}{{ stateClasses.disabled }}{% endif %}" data-box-component="true" {% if box.disabled %} disabled="disabled" {% endif %} {% if box.checked %} checked{% endif %}="checked{% endif %}" {% if box.ariaLabel %} aria-label="{{ box.ariaLabel }}"/>
  </div>
{% endmacro %}

{#
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
May your bugs be forever exiled to the shadow realm ✦
Charlotte Carpentier · 2025
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#}
