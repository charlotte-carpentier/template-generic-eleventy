{# ┌─────────────────────────────────────────────────────────┐
   │ ATOM › Button                                           │
   │ Interactive button with variants and states             │
   └─────────────────────────────────────────────────────────┘ #}

{#
  Props:
    - options.name (string): Button identifier
    - options.datas (array): Button configuration data
    - options.type (string): Button type override
    - options.disabled (boolean): Override disabled state
    - options.onclick (string): Inline click handler
    - options.id (string): Button ID attribute
    - options.ariaLabel (string): ARIA label for accessibility
    - options.ariaDescribedby (string): ARIA described-by reference
    - options.isErrorPage (boolean): Apply error-page-specific styling
    - options.iconDatas (array): Icon atom data (required if button has icons)

  Usage — Summon HAT Components Wisely:
    {% from "01-atoms/button.njk" import renderButton %}

    Basic button:
    {{ renderButton({
        name: "demoButton1",
        datas: atoms.button.buttons,
        iconDatas: atoms.icon.icons
    }) }}

    Error page button with specific styling:
    {{ renderButton({
        name: "button-reveal-all",
        datas: option.buttonDatas,
        iconDatas: option.iconDatas,
        isErrorPage: true
    }) }}

  @created 2025-01-15
#}

{% from "01-atoms/icon.njk" import renderIcon %}

{% macro renderButton(options) %}
  {# Validate required props #}
  {% if not options.datas %}
    <span class="error" role="alert">Error: Missing required prop (datas)</span>
  {% elif not options.name %}
    <span class="error" role="alert">Error: Missing required prop (name)</span>
  {% else %}
    {# Find button using universal filter #}
    {% set buttonData = options.datas | findByName(options.name) %}

    {# Render button or error message #}
    {% if not buttonData %}
      <span class="error" role="alert">Button not found: {{ options.name }}</span>
    {% else %}
      {# Compute final values with fallback cascade #}
      {% set buttonType = options.type | default(buttonData.type) | default('button') %}
      {% set isDisabled = options.disabled or buttonData.disabled %}
      {% set finalAriaLabel = options.ariaLabel | default(buttonData.ariaLabel) %}
      {% set finalAriaDescribedby = options.ariaDescribedby | default(buttonData.ariaDescribedby) %}
      
      {# Check if button has icon #}
      {% set hasIcon = buttonData.iconName %}
      {% set iconPosition = buttonData.iconPosition | default('left') %}

      {# Render button element #}
      <button
        type="{{ buttonType }}"
        data-button-name="{{ buttonData.name }}"
        data-button-type="button"
        {% if hasIcon %}data-button-icon-position="{{ iconPosition }}"{% endif %}
        {% if isDisabled %}disabled{% endif %}
        {% if options.onclick %}onclick="{{ options.onclick | escape }}"{% endif %}
        {% if options.id %}id="{{ options.id }}"{% endif %}
        {% if finalAriaLabel %}aria-label="{{ finalAriaLabel }}"{% endif %}
        {% if finalAriaDescribedby %}aria-describedby="{{ finalAriaDescribedby }}"{% endif %}
      >
        {# Icon left position #}
        {% if hasIcon and (iconPosition == 'left' or iconPosition == 'both') %}
          {% if options.iconDatas %}
            {{ renderIcon({ 
                name: buttonData.iconName, 
                datas: options.iconDatas 
            }) }}
          {% endif %}
        {% endif %}

        {# Icon center position (icon-only button) #}
        {% if hasIcon and iconPosition == 'center' %}
          {% if options.iconDatas %}
            {{ renderIcon({ 
                name: buttonData.iconName, 
                datas: options.iconDatas 
            }) }}
          {% endif %}
        {% endif %}

        {# Button text (skip for icon-only buttons) #}
        {% if iconPosition != 'center' %}
          {{ buttonData.text }}
        {% endif %}

        {# Icon right position #}
        {% if hasIcon and (iconPosition == 'right' or iconPosition == 'both') %}
          {% if options.iconDatas %}
            {{ renderIcon({ 
                name: buttonData.iconName, 
                datas: options.iconDatas 
            }) }}
          {% endif %}
        {% endif %}
      </button>
    {% endif %}
  {% endif %}
{% endmacro %}

{#
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
May your bugs be forever exiled to the shadow realm ✦
Charlotte Carpentier · 2025
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#}