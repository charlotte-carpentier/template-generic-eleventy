{# ┌─────────────────────────────────────────────────────────┐
   │ ATOM › Select                                           │
   │ Dropdown select inputs with semantic attributes         │
   └─────────────────────────────────────────────────────────┘ #}

{#
  Props:
    - options.name (string): Select identifier
    - options.datas (object): Select configuration data
    - options.disabled (boolean): Override disabled state
    - options.ariaLabel (string): Override aria-label
    - options.iconDatas (array): Icon atom data for dropdown arrow

  Usage — Summon HAT Components Wisely:
    {% from "01-atoms/select.njk" import renderSelect %}

    {{ renderSelect({
        name: "demoSelect1",
        datas: atoms.select.selects,
        iconDatas: atoms.icon.icons
    }) }}

  @created 2025-01-15
#}

{% from "01-atoms/icon.njk" import renderIcon %}

{% macro renderSelect(options) %}
  {# Validate required props #}
  {% if not options.datas %}
    <span class="error" role="alert">Error: Missing required prop (datas)</span>
  {% elif not options.name %}
    <span class="error" role="alert">Error: Missing required prop (name)</span>
  {% else %}
    {# Find select using universal filter #}
    {% set selectData = options.datas | findByName(options.name) %}

    {# Render select or error message #}
    {% if not selectData %}
      <span class="error" role="alert">Select not found: {{ options.name }}</span>
    {% else %}
      {# Compute final values with fallback cascade #}
      {% set isDisabled = options.disabled | default(selectData.disabled) | default(false) %}
      {% set finalAriaLabel = options.ariaLabel | default(selectData.ariaLabel) %}

      {# Wrapper for select + arrow positioning #}
      <div data-select-wrapper>
        <select
          name="{{ selectData.name }}"
          data-select-name="{{ selectData.name }}"
          data-select-type="select"
          data-select-variant="{{ selectData.variant }}"
          {% if isDisabled %}disabled{% endif %}
          {% if finalAriaLabel %}aria-label="{{ finalAriaLabel }}"{% endif %}
        >
          {% if selectData.options %}
            {% for opt in selectData.options %}
              <option
                value="{{ opt.value }}"
                {% if opt.selected %}selected{% endif %}
              >
                {{ opt.label }}
              </option>
            {% endfor %}
          {% endif %}
        </select>

        {# Dropdown arrow icon - Use icon atom if available, fallback to SVG #}
        <div data-select-arrow aria-hidden="true">
          {% if options.iconDatas %}
            {# Try to find a chevron/caret down icon #}
            {% set arrowIcon = options.iconDatas | findByName('demoRight1') %}
            {% if arrowIcon %}
              {{ renderIcon({ 
                  name: 'demoRight1', 
                  datas: options.iconDatas 
              }) }}
            {% else %}
              {# Fallback to inline SVG if no suitable icon found #}
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
              </svg>
            {% endif %}
          {% else %}
            {# Fallback to inline SVG #}
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
              <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/>
            </svg>
          {% endif %}
        </div>
      </div>
    {% endif %}
  {% endif %}
{% endmacro %}

{#
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
May your bugs be forever exiled to the shadow realm ✦
Charlotte Carpentier · 2025
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#}