{# ┌─────────────────────────────────────────────────────────┐
   │ ATOM › Tag                                              │
   │ Labels and badges with interactive support              │
   └─────────────────────────────────────────────────────────┘ #}

{#
  Props:
    - options.name (string): Tag identifier
    - options.datas (object): Tag configuration data
    - options.dataActiveTag (boolean): Enable interactive behavior
  
  Usage:
    {% from "01-atoms/tag.njk" import renderTag %}
    
    Static tag:
    {{ renderTag({ name: "adventure", datas: atoms.tags }) }}
    
    Interactive tag:
    {{ renderTag({ 
        name: "filter_sword", 
        datas: atoms.tags, 
        dataActiveTag: true 
    }) }}
  
  Notes:
    - Style variants from "variants" object in tags.json
    - Interactive tags enabled via isInteractive or dataActiveTag
    - Hover states defined in variant CSS classes
    - active-tag.js script required for interactivity (included in base.njk)
  
  Accessibility:
    - Supports role="status" or role="alert" when specified
    - Title attribute for hover context
    - Optional visually-hidden text for screen readers
    - Keyboard support (Space/Enter) for interactive tags
  
  Features:
    - Adds inline styles for active-tag and sr-only (first instance only)
    - Screen reader text support
    - Toggle functionality for filtering content
  
  @created 2025-01-15
#}

{% macro renderTag(options) %}
  {# Initialize tagData as null before searching #}
  {% set tagData = null %}
  
  {# Find tag in data collection #}
  {% for tag in options.datas.tags %}
    {% if tag.name == options.name %}
      {% set tagData = tag %}
    {% endif %}
  {% endfor %}

  {# Get global style that applies to all tags #}
  {% set globalStyle = options.datas.globalStyle %}

  {# Add styles for active tags and screen reader only content #}
  {% if loop.first %}
    <style>
      .active-tag { {{ options.datas.activeTagStyle }} }
      .sr-only { {{ options.datas.srOnlyStyle }} }
    </style>
  {% endif %}

  {# Render tag if data was found #}
  {% if tagData %}
    {# Get variant-specific style or default to empty string if not found #}
    {% set variantStyle = options.datas.variants[tagData.variant] | default('') %}
    
    {# Store title and screenReaderText values for easier access #}
    {% set titleAttr = tagData.title %}
    {% set screenReaderText = tagData.screenReaderText %}
    
    {# Determine if tag should be interactive #}
    {% set isInteractive = options.dataActiveTag or tagData.isInteractive %}
    
    <span 
      class="{{ globalStyle }} {{ variantStyle }}"
      {% if isInteractive %}data-active-tag="true"{% endif %}
      {% if tagData.role %}role="{{ tagData.role }}"{% endif %}
      {% if titleAttr %}title="{{ titleAttr }}"{% endif %}
    >
      {{ tagData.text }}
      {% if screenReaderText %}
        <span class="">{{ screenReaderText }}</span>
      {% endif %}
    </span>
    
  {% else %}
    {# Error message if tag not found in data collection #}
    <span>Tag not found: {{ options.name }}</span>
  {% endif %}
{% endmacro %}

{#
============================
Summon HAT Components Wisely
============================

Adding a new tag to tags.json:
{
  "tags": [
    {
      "name": "new_tag_name",
      "text": "Your Tag Text",
      "variant": "default",
      "title": "Tooltip text",
      "role": "status",
      "screenReaderText": "Text for screen readers",
      "isInteractive": true
    }
  ]
}

Example: filtering content with interactive tags
<div class="filters">
  {{ renderTag({ name: "filter_sword", datas: atoms.tags, dataActiveTag: true }) }}
  {{ renderTag({ name: "filter_bow", datas: atoms.tags, dataActiveTag: true }) }}
  {{ renderTag({ name: "filter_staff", datas: atoms.tags, dataActiveTag: true }) }}
</div>

May your bugs be forever exiled to the shadow realm. ✦
#}